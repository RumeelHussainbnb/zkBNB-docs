"use strict";(self.webpackChunkzkbnb_docs=self.webpackChunkzkbnb_docs||[]).push([[1995],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>b});var a=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=s,b=d["".concat(c,".").concat(m)]||d[m]||p[m]||r;return t?a.createElement(b,o(o({ref:n},u),{},{components:t})):a.createElement(b,o({ref:n},u))}));function b(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,o=new Array(r);o[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[d]="string"==typeof e?e:s,o[1]=i;for(var l=2;l<r;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(67294),s=t(86010);const r="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(r,o),hidden:t},n)}},71084:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>y,contentTitle:()=>f,default:()=>w,frontMatter:()=>g,metadata:()=>h,toc:()=>v});var a=t(87462),s=t(67294),r=t(3905),o=t(86010),i=t(72389),c=t(67392),l=t(7094),u=t(12466);const d="tabList__CuJ",p="tabItem_LNqP";function m(e){const{lazy:n,block:t,defaultValue:r,values:i,groupId:m,className:b}=e,k=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=i??k.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),f=(0,c.l)(g,((e,n)=>e.value===n.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===r?r:r??k.find((e=>e.props.default))?.props.value??k[0].props.value;if(null!==h&&!g.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:v}=(0,l.U)(),[N,w]=(0,s.useState)(h),z=[],{blockElementScrollPositionUntilNextRender:B}=(0,u.o5)();if(null!=m){const e=y[m];null!=e&&e!==N&&g.some((n=>n.value===e))&&w(e)}const x=e=>{const n=e.currentTarget,t=z.indexOf(n),a=g[t].value;a!==N&&(B(n),w(a),null!=m&&v(m,String(a)))},T=e=>{let n=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{const t=z.indexOf(e.currentTarget)+1;n=z[t]??z[0];break}case"ArrowLeft":{const t=z.indexOf(e.currentTarget)-1;n=z[t]??z[z.length-1];break}}n?.focus()};return s.createElement("div",{className:(0,o.Z)("tabs-container",d)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},b)},g.map((e=>{let{value:n,label:t,attributes:r}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:e=>z.push(e),onKeyDown:T,onClick:x},r,{className:(0,o.Z)("tabs__item",p,r?.className,{"tabs__item--active":N===n})}),t??n)}))),n?(0,s.cloneElement)(k.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},k.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==N})))))}function b(e){const n=(0,i.Z)();return s.createElement(m,(0,a.Z)({key:String(n)},e))}var k=t(85162);const g={title:"zkBNB TypeScript SDK"},f="Quickstart",h={unversionedId:"sdks/zkbnb-ts-sdk/quickstart",id:"sdks/zkbnb-ts-sdk/quickstart",title:"zkBNB TypeScript SDK",description:"zkBNB TypeScript SDK provides API for interacting with zkBNB L2 component in the node environment.",source:"@site/docs/sdks/zkbnb-ts-sdk/quickstart.md",sourceDirName:"sdks/zkbnb-ts-sdk",slug:"/sdks/zkbnb-ts-sdk/quickstart",permalink:"/zkBNB-docs/docs/sdks/zkbnb-ts-sdk/quickstart",draft:!1,editUrl:"https://github.com/RumeelHussainbnb/zkBNB-docs/docs/sdks/zkbnb-ts-sdk/quickstart.md",tags:[],version:"current",frontMatter:{title:"zkBNB TypeScript SDK"},sidebar:"sdkSidebar",previous:{title:"zkBNB Javascript SDK",permalink:"/zkBNB-docs/docs/sdks/zkbnb-js-sdk/quickstart"},next:{title:"zkBNB Web SDK",permalink:"/zkBNB-docs/docs/sdks/zkbnb-web-sdk/quickstart"}},y={},v=[{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Init ZKClient and ZkCrypto",id:"init-zkclient-and-zkcrypto",level:3},{value:"Simple queries",id:"simple-queries",level:3},{value:"Sign and send txs to ZKBNB L2",id:"sign-and-send-txs-to-zkbnb-l2",level:3},{value:"Transfer demo",id:"transfer-demo",level:4},{value:"Interfaces",id:"interfaces",level:2}],N={toc:v};function w(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},N,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,"zkBNB TypeScript SDK provides API for interacting with zkBNB L2 component in the node environment.\nThe SDK offers various L2 operations such as get account details, get gas fees etc.\nTo understand the entire scope of operations available, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/zkbnb-api"},"API Reference"),".\nIn addition, SDK comes with a crypto component for signing txs and sending signed txs to zkBNB L2."),(0,r.kt)("p",null,"This SDK does not provide methods to interact with ZKBNB L1."),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)(b,{mdxType:"Tabs"},(0,r.kt)(k.Z,{value:"jsSdk",label:"zkBNB Js SDK",mdxType:"TabItem"},"Using npm:",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"> npm install @bnb-chain/zkbnb-js-sdk\n")),(0,r.kt)("p",null,"Using yarn:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"> yarn add @bnb-chain/zkbnb-js-sdk\n")),(0,r.kt)("p",null,"Using pnpm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"> pnpm add @bnb-chain/zkbnb-js-sdk\n"))),(0,r.kt)(k.Z,{value:"useTs",label:"zkBNB L1 SDK",mdxType:"TabItem"},"Using npm:",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"> npm install @bnb-chain/zkbnb-l1-sdk\n")),(0,r.kt)("p",null,"Using yarn:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"> yarn add @bnb-chain/zkbnb-l1-sdk\n")),(0,r.kt)("p",null,"Using pnpm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"> pnpm add @bnb-chain/zkbnb-l1-sdk\n")))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"init-zkclient-and-zkcrypto"},"Init ZKClient and ZkCrypto"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Client } from '@bnb-chain/zkbnb-js-sdk';\nimport { ZkCrypto } from '@bnb-chain/zkbnb-js-sdk/zkCrypto'\n\nconst client = new Client('https://testapi.zkbnbchain.org');\n")),(0,r.kt)("h3",{id:"simple-queries"},"Simple queries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const res = await client.getAccountInfoByAccountIndex(1);\nconsole.log(res)\n/* Response\n{\n    status: 1,\n        index: 2,\n    name: 'sher.legend',\n    pk: 'b0b6f7466154578ec66d51a335ead65ffd6a7210567fad9e68b6df8a5ce5dd85',\n    nonce: 0,\n    assets: [\n    {\n        id: 0,\n        name: 'BNB',\n        balance: '100000000000000000',\n        price: '0E+00'\n    },\n    {\n        id: 1,\n        name: 'BUSD',\n        balance: '100000000000000000000',\n        price: '0E+00'\n    },\n    {\n        id: 2,\n        name: 'LEG',\n        balance: '100000000000000000000',\n        price: '0E+00'\n    },\n    {\n        id: 3,\n        name: 'REY',\n        balance: '100000000000000000000',\n        price: '0E+00'\n    }\n],\n    total_asset_value: '0'\n}*/\n\n")),(0,r.kt)("h3",{id:"sign-and-send-txs-to-zkbnb-l2"},"Sign and send txs to ZKBNB L2"),(0,r.kt)("p",null,"Currently, we only support sending tx by seed. the seed is a random hex string which you used in register ZNS"),(0,r.kt)("admonition",{title:"Generate your seed",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"\ufe0fif you want to use the same account as ",(0,r.kt)("a",{parentName:"p",href:"https://test.zkbnbchain.org/wallet"},"zk-wallet"),", you can use below methods to generate your Seed."),(0,r.kt)("h4",{parentName:"admonition",id:"web3"},"Web3"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"    import * as util from 'util';\n    import Web3 from \"web3\";\n    \n    const privateKey = 'your private key';\n    const chainId = 97;  // bsc mainnet: 56, bsc testnet: 97\n    const message = util.format(\"Access zkbnb account.\\n\\nOnly sign this message for a trusted client!\\nChain ID: %s.\", chainId);\n    const web3 = new Web3()\n    const { signature: seed } = web3.eth.accounts.sign(message, privateKey);\n    console.log(seed)\n")),(0,r.kt)("h4",{parentName:"admonition",id:"ethers"},"Ethers"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"    import * as util from 'util';\n    import { ethers } from \"ethers\";\n    \n    const privateKey = 'your private key';\n    const chainId = 97;  // bsc mainnet: 56, bsc testnet: 97\n    const message = util.format(\"Access zkbnb account.\\n\\nOnly sign this message for a trusted client!\\nChain ID: %s.\", chainId);\n    const wallet = new ethers.Wallet(privateKey);\n    const seed = await wallet.signMessage(message);\n    console.log(seed)\n"))),(0,r.kt)("h4",{id:"transfer-demo"},"Transfer demo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Client, TxType } from '@bnb-chain/zkbnb-js-sdk';\nimport { ZkCrypto } from '@bnb-chain/zkbnb-js-sdk/zkCrypto/web'\nimport * as util from 'util';\nimport { ethers } from \"ethers\";\n\nconst client = new Client('https://testapi.zkbnbchain.org');\n\nlet ZK\n\nasync function initZk() {\n  if (!ZK) {\n    ZK = await ZkCrypto()\n  }\n\n  return ZK\n}\n\n// Generate seed\nasync function generateSeed() {\n  const privateKey = 'your private key';\n  const chainId = 97;  // bsc mainnet: 56, bsc testnet: 97\n  const message = util.format(\"Access zkbnb account.\\n\\nOnly sign this message for a trusted client!\\nChain ID: %s.\", chainId);\n  const wallet = new ethers.Wallet(privateKey);\n  const seed = await wallet.signMessage(message);\n  return seed.substring(2);\n}\n\n// Get account\nasync function getAccount(seed) {\n  const pubKey = ZK.getEddsaCompressedPublicKey(seed)\n  const account = await client.getAccountByPubKey(pubKey);\n  return account;\n}\n\n// Create transfer tx\nasync function transfer() {\n  const seed = await generateSeed();\n  const fromAccount = await getAccount(seed);\n  const { nonce: fromAccountNonce } = await client.getNextNonce(fromAccount.index)\n  const gasAccount = await client.getGasAccount()\n  const toAccountNameHash = ZK.getAccountNameHash(gasAccount.name)\n  const txInfo = {\n    from_account_index: fromAccount.index,\n    to_account_index: gasAccount.index,\n    to_account_name: toAccountNameHash,\n    asset_id: 0,   // Payment asset Id. 0 means BNB\n    asset_amount: ethers.utils.parseEther(\"0.0001\").toString(),\n    gas_account_index: gasAccount.index,\n    gas_fee_asset_id: 0,  // BNB as gas fee\n    gas_fee_asset_amount: ethers.utils.parseEther(\"0.0001\").toString(),\n    memo: 'transfer BNB to John',\n    call_data: `${500}`,\n    expired_at: Date.now() + 7200000,\n    nonce: fromAccountNonce,\n  };\n\n  //Sign tx with the seed phrase using zkBNB crypto component\n  const signedTx = ZK.signTransfer(seed, JSON.stringify(txInfo))\n\n  //Send signed tx to ZKBNB L2\n  const txHash = await client.sendRawTx(TxType.TxTypeTransfer.toString(), signedTx)\n  return txHash\n}\n\ninitZk()\n  .then(() => transfer())\n  .then(console.log)\n  .catch(console.error)\n")),(0,r.kt)("h2",{id:"interfaces"},"Interfaces"),(0,r.kt)("p",null,"For More Documents, Please refer to ",(0,r.kt)("a",{parentName:"p",href:"/zkBNB-docs/docs/sdks/zkbnb-js-sdk/quickstart"},"JS SDK")))}w.isMDXComponent=!0}}]);